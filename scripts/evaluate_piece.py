"""Generates the code that uses a lookup table to find a piece's score its type, colour, and position."""

CHAR_TO_PIECE = {'S':1, 'P': 5, 'R': 9, 'W': 13, 's': 3, 'p': 7, 'r': 11, 'w': 15}

INDEX_TO_LINE = [
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        6,
        6,
        6,
        6,
        6,
        6]

CELL_TO_SCORE = [95.01072905515305, 92.49143563280539, 79.36992614265043, 70.31908045010489, 69.7585654423104, 80.3850161864365, 107.48680782418519, 113.56292934595668, 105.96098857862675, 94.32552662192414, 98.77651974475098, 95.72716698349664, 94.24585352320125, 106.02074875141415, 116.5356439434876, 123.45646505608578, 105.6139628669484, 111.9947086057366, 125.98240798477862, 109.07576159173581, 133.43103043253996, 118.58479700329474, 125.9338173077865, 118.62153520336112, 117.88978818251279, 123.7231304328951, 130.48425646226826, 128.49109202957166, 137.70505244113295, 130.98260318055614, 132.21957861219227, 118.21433240944097, 151.84801961167648, 135.15580322558668, 169.60543682660625, 137.91875376728004, 142.93006763048263, 153.86843836467776, 144.22028771377538, -97.7701468823695, -78.33024144835888, -83.72850874610815, -94.86425500646496, -82.15927894904185, -80.28559169076124, -89.97083970910305, -114.82999551419782, -112.56537504488065, -104.71825609306615, -102.0385915348447, -99.47164286366515, -93.65196700208486, -99.84436124066711, -103.23337258801257, -99.35924528728495, -98.54995574061428, -107.38126960871935, -106.45395194181675, -111.79448970430424, -123.90258722716406, -131.03089759831064, -144.011502065531, -116.68845650055002, -109.59517752105157, -101.50900153812555, -127.34891018241107, -135.74144578309867, -124.19875970334478, -139.41900129592904, -127.37458997935754, -130.11396548132473, -165.19523807900222, -148.11203310110895, -138.28658405632575, -137.75840844161712, -135.71760645931542, -130.1873420142191, -145.6234192787373]
WISE_SCORE = 85.85338695815294
STACK_SCORE = 1.145153054291496

def piece_to_int(piece: str):
    if len(piece) == 1:
        return CHAR_TO_PIECE[piece]
    else:
        return CHAR_TO_PIECE[piece[0]] + CHAR_TO_PIECE[piece[1]]*16

def evaluate_piece(piece, index):
    score = 0
    if piece[0] not in ['W', 'w']:
        if piece[0] in ['S', 'P', 'R']:
            if INDEX_TO_LINE[index] == 0:
                score = 512*1024
            else:
                score = CELL_TO_SCORE[index]
        else:
            if INDEX_TO_LINE[index] == 6:
                score = -512*1024
            else:
                score = CELL_TO_SCORE[index]
    
    elif piece[0] == 'W':
        score = WISE_SCORE
    elif piece[0] == 'w':
        score = -WISE_SCORE
    
    if len(piece) == 2:
        score = score * 2
        if piece[0] in ['S', 'P', 'R', 'W']:
            score += STACK_SCORE
        else:
            score -= STACK_SCORE
    return round(score)
    

pieces = []

for bottom in ['S', 'P', 'R']:
    for top in ['S', 'P', 'R']:
        pieces.append(top + bottom)

for top in ['S', 'P', 'R', 'W']:
    pieces.append(top + 'W')

pieces += ['S', 'P', 'R', 'W']

for bottom in ['s', 'p', 'r']:
    for top in ['s', 'p', 'r']:
        pieces.append(top + bottom)

for top in ['s', 'p', 'r', 'w']:
    pieces.append(top + 'w')

pieces += ['s', 'p', 'r', 'w']

print("    const int64_t pieceScores[1575] {")
for piece in pieces:
    for index in range(45):
        score = evaluate_piece(piece, index)
        print(f"        {score},")
for index in range(44):
    print("        0,")
print("        0")
print("    };")